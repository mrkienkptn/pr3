[{"D:\\20201\\Project3\\chat\\src\\App.js":"1","D:\\20201\\Project3\\chat\\src\\components\\ModalAddUserToGroup.js":"2","D:\\20201\\Project3\\chat\\src\\pages\\home\\VideoCallGroup.js":"3","D:\\20201\\Project3\\chat\\src\\utils\\dragElement.js":"4","D:\\20201\\Project3\\chat\\src\\pages\\home\\Messages.js":"5","D:\\20201\\Project3\\chat\\src\\reportWebVitals.js":"6","D:\\20201\\Project3\\chat\\src\\components\\NotifyItem.js":"7","D:\\20201\\Project3\\chat\\src\\components\\FoundUser.js":"8","D:\\20201\\Project3\\chat\\src\\pages\\home\\TabBar.js":"9","D:\\20201\\Project3\\chat\\src\\index.js":"10","D:\\20201\\Project3\\chat\\src\\components\\PrivateRoute.js":"11","D:\\20201\\Project3\\chat\\src\\components\\PublicRoute.js":"12","D:\\20201\\Project3\\chat\\src\\components\\ReceiveMes.js":"13","D:\\20201\\Project3\\chat\\src\\components\\ReceiveMesGroup.js":"14","D:\\20201\\Project3\\chat\\src\\pages\\home\\ChatList.js":"15","D:\\20201\\Project3\\chat\\src\\components\\ModalJoinGroup.js":"16","D:\\20201\\Project3\\chat\\src\\pages\\home\\SideBar.js":"17","D:\\20201\\Project3\\chat\\src\\pages\\signup\\index.js":"18","D:\\20201\\Project3\\chat\\src\\pages\\home\\MessagesGroup.js":"19","D:\\20201\\Project3\\chat\\src\\components\\ChatListItem.js":"20","D:\\20201\\Project3\\chat\\src\\pages\\start\\index.js":"21","D:\\20201\\Project3\\chat\\src\\pages\\login\\index.js":"22","D:\\20201\\Project3\\chat\\src\\pages\\home\\VideoC.js":"23","D:\\20201\\Project3\\chat\\src\\components\\GroupListItem.js":"24","D:\\20201\\Project3\\chat\\src\\components\\VideoCallProvider.js":"25","D:\\20201\\Project3\\chat\\src\\pages\\home\\SearchUser.js":"26","D:\\20201\\Project3\\chat\\src\\components\\SendMes.js":"27","D:\\20201\\Project3\\chat\\src\\utils\\grpeer.js":"28","D:\\20201\\Project3\\chat\\src\\utils\\constant.js":"29"},{"size":1134,"mtime":1607952761616,"results":"30","hashOfConfig":"31"},{"size":3526,"mtime":1606630258681,"results":"32","hashOfConfig":"31"},{"size":11440,"mtime":1608019864969,"results":"33","hashOfConfig":"31"},{"size":932,"mtime":1605683563946,"results":"34","hashOfConfig":"31"},{"size":3383,"mtime":1608011384411,"results":"35","hashOfConfig":"31"},{"size":362,"mtime":1607238241472,"results":"36","hashOfConfig":"31"},{"size":2310,"mtime":1604021233154,"results":"37","hashOfConfig":"31"},{"size":2317,"mtime":1603988068881,"results":"38","hashOfConfig":"31"},{"size":7087,"mtime":1608020768452,"results":"39","hashOfConfig":"31"},{"size":499,"mtime":1607244285022,"results":"40","hashOfConfig":"31"},{"size":384,"mtime":1603590596317,"results":"41","hashOfConfig":"31"},{"size":303,"mtime":1602298185871,"results":"42","hashOfConfig":"31"},{"size":436,"mtime":1603898396926,"results":"43","hashOfConfig":"31"},{"size":519,"mtime":1606630258682,"results":"44","hashOfConfig":"31"},{"size":7873,"mtime":1607754908141,"results":"45","hashOfConfig":"31"},{"size":3830,"mtime":1606630258681,"results":"46","hashOfConfig":"31"},{"size":4073,"mtime":1608022782559,"results":"47","hashOfConfig":"31"},{"size":5301,"mtime":1603302642384,"results":"48","hashOfConfig":"31"},{"size":3517,"mtime":1607952811616,"results":"49","hashOfConfig":"31"},{"size":1241,"mtime":1605683563938,"results":"50","hashOfConfig":"31"},{"size":2232,"mtime":1607334851631,"results":"51","hashOfConfig":"31"},{"size":4417,"mtime":1603301934246,"results":"52","hashOfConfig":"31"},{"size":7643,"mtime":1607952921281,"results":"53","hashOfConfig":"31"},{"size":1163,"mtime":1606630258680,"results":"54","hashOfConfig":"31"},{"size":3222,"mtime":1608020808672,"results":"55","hashOfConfig":"31"},{"size":2880,"mtime":1603590596319,"results":"56","hashOfConfig":"31"},{"size":412,"mtime":1606404700073,"results":"57","hashOfConfig":"31"},{"size":325,"mtime":1607960301499,"results":"58","hashOfConfig":"31"},{"size":179,"mtime":1608018412068,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"1hcdiqo",{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"63"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"63"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"71"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\20201\\Project3\\chat\\src\\App.js",["140","141"],"import React from 'react'\nimport { BrowserRouter as Router, Switch, Link } from 'react-router-dom'\nimport PublicRoute from './components/PublicRoute'\nimport PrivateRoute from './components/PrivateRoute'\nimport Login from './pages/login'\nimport SignUp from './pages/signup'\nimport StartPage from './pages/start'\nimport Home from './pages/home'\nimport './index.css'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport {domain, server} from './utils/constant'\n\nconst client = new ApolloClient({\n    uri: `${server}/graphql`,\n    cache: new InMemoryCache()\n});\nconst App = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <Switch>\n                    <PublicRoute exact={true} path=\"/\" component={StartPage} />\n                    <PublicRoute exact={true} path=\"/login\" component={Login} />\n                    <PublicRoute exact={true} path=\"/signup\" component={SignUp} />\n                    <PrivateRoute exact={true} path=\"/home\" component={Home} />\n                </Switch>\n            </Router>\n        </ApolloProvider>\n    )\n}\nexport default App",["142","143"],"D:\\20201\\Project3\\chat\\src\\components\\ModalAddUserToGroup.js",["144","145"],"import React,{useState} from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n// import FindUserAddGroup from './FindUserAddGroup'\r\nimport {useQuery, gql, useMutation} from '@apollo/client'\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './FoundUser.css'\r\n\r\nconst CREATE_GROUP = gql`\r\n    mutation CreateGroup($idRole: String!, $roomName: String!) {\r\n        createGroup(idRole: $idRole, roomName: $roomName) {\r\n            id\r\n            name\r\n            admin\r\n            code\r\n        }\r\n    }\r\n`\r\n\r\nconst ModalAddUserToGroup = () => {\r\n\r\n    const classes = useStyles();\r\n    const currentUserId = localStorage.getItem('id')\r\n    const [groupName, setGroupName] = useState('')\r\n    const [notifyCreateGroup, setNotifyCreateGroup] = useState('')\r\n    const [createGroup, result] = useMutation(CREATE_GROUP)\r\n\r\n    const onChangeValue = (e) => {\r\n        setGroupName(e.target.value)\r\n    }\r\n\r\n    const onClickCreateGroup = (e) => {\r\n        e.preventDefault()\r\n        if (groupName !== '') {\r\n            createGroup({\r\n                variables: {idRole: currentUserId, roomName: groupName}\r\n            })\r\n            .then(res => {\r\n                global.chatSocket.emit('create-new-group', {status: true})\r\n                setNotifyCreateGroup('Create group success')\r\n                setGroupName('')\r\n            })\r\n            .catch(err => {\r\n                setNotifyCreateGroup(err)\r\n            })\r\n        } else {\r\n            setNotifyCreateGroup('You have not entered group name')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal-dialog\" role=\"document\">\r\n            <div className=\"modal-content\" style={{width:'700px', height: '500px'}}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Create Group</h5>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">×</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <div className=\"row\" style={{marginLeft: '120px'}}>\r\n                        <div className=\"search-message w-50\">\r\n                            <SearchIcon />\r\n                            <input placeholder=\"Enter group name...\" onChange={onChangeValue} value={groupName}/>\r\n                        </div>\r\n                        <div className=\"w-20\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                className={classes.button}\r\n                                onClick={onClickCreateGroup}\r\n                            >\r\n                                Continue\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"row\" style={{marginLeft: '60px'}}>\r\n                            <p className=\"text-center font-weight-bold mt-2\">{notifyCreateGroup}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        textTransform: 'capitalize',\r\n        height: 35,\r\n        marginRight: 20\r\n    },\r\n}));\r\n\r\nexport default ModalAddUserToGroup",["146","147"],"D:\\20201\\Project3\\chat\\src\\pages\\home\\VideoCallGroup.js",["148","149","150"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport CallEndIcon from '@material-ui/icons/CallEnd';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport { dragElement } from '../../utils/dragElement'\r\nimport Peer from 'peerjs'\r\nimport './VideoCallGroup.css'\r\nimport {domain, server} from '../../utils/constant'\r\nimport {gql, useMutation} from '@apollo/client'\r\n\r\nconst GET_USER_INFO = gql`\r\n    mutation GetUserInfo($userId: String!) {\r\n        getUserInfo(userId: $userId) {\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\nconst VideoC = (props) => {\r\n\r\n    const {  groupId, groupName } = props\r\n    const [isCalling, setIsCalling] = useState(false)\r\n    const [micOn, setMicOn] = useState(true)\r\n    const [camOn, setCamOn] = useState(true)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n\r\n    const [GetUserInfo] = useMutation(GET_USER_INFO)\r\n\r\n    const userId = localStorage.getItem('id')\r\n    \r\n    const peerId = userId\r\n    \r\n\r\n    const sendData = (event, data) => {\r\n        global.notifySocket.emit(event, JSON.stringify(data))\r\n    }\r\n    const handleMic = () => {\r\n        setMicOn(!micOn)\r\n    }\r\n    const closeVideoCall = () => {\r\n        setOpenAlert(true)\r\n    }\r\n    const closeAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n    const agreeAlert = () => {\r\n        hangup()\r\n        props.setVideoView(null)\r\n        setOpenAlert(false)\r\n    }\r\n    const addVideoStream = (video, stream, div) => {\r\n        video.srcObject = stream\r\n\r\n        video.addEventListener('loadedmetadata', () => {\r\n            video.play()\r\n        })\r\n        div.append(video)\r\n        document.getElementById('remote-videoo').append(div)\r\n\r\n    }\r\n    const startCall = async (peer) => {\r\n        setIsCalling(true)\r\n        try {\r\n            navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n                .then(stream => {\r\n                    \r\n                    document.getElementById('local-video').srcObject = stream\r\n                   \r\n                    peer.on('call', call => {\r\n                        console.log(\"RECEIVE CALLLLLLLLL\", call.peer)\r\n\r\n                        const div = document.createElement('div')\r\n                        div.setAttribute('class', 'video-item')\r\n                        const name = document.createElement('p')\r\n                        const video = document.createElement('video')\r\n                        video.setAttribute('class', 'remote-video')   \r\n                        call.answer(stream)\r\n                        \r\n                        call.on('stream', async userStream => {                                                     \r\n                            let rmName = (await GetUserInfo({variables: {userId: call.peer}})).data.getUserInfo.name\r\n                            name.innerHTML = rmName\r\n                            div.append(name)\r\n                            addVideoStream(video, userStream, div)\r\n                        })       \r\n\r\n                        call.on('close', () => {\r\n                            div.remove()\r\n                        })\r\n                        global.notifySocket.on('member_quit', dt => {\r\n                            let id = JSON.parse(dt).peerId\r\n                            if (id === call.peer)\r\n                                call.close() //fix here\r\n                        })\r\n                        \r\n                    })\r\n\r\n                    global.notifySocket.on('member_join', dt => {\r\n\r\n                        console.log(\"HAS MEMBER JOIN : \", JSON.parse(dt).peerId)\r\n                        connectToNewMember(JSON.parse(dt), stream, peer)\r\n                    })\r\n\r\n                    sendData(\"join_group_call\", {\r\n                        callerId: localStorage.getItem('id'),\r\n                        groupId: groupId,\r\n                        peerId: peerId,\r\n                        callerName: localStorage.getItem('name')\r\n                    })\r\n                })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    const connectToNewMember = (peerData, stream, peer) => {\r\n        console.log(\"CALL TO, \", peerData.peerId)\r\n        const call = peer.call(peerData.peerId, stream)\r\n        \r\n        if (call === undefined) return \r\n        const div = document.createElement('div')\r\n        div.setAttribute('class', 'video-item')\r\n\r\n        const name = document.createElement('p')\r\n        name.innerHTML = peerData.callerName\r\n\r\n        div.append(name)\r\n\r\n        const video = document.createElement('video')\r\n        video.setAttribute('class', 'remote-video')\r\n\r\n\r\n        call.on('stream', userStream => {\r\n            console.log(\"RECEISTREAM, \", userStream)\r\n            addVideoStream(video, userStream, div)\r\n        })\r\n        call.on('close', () => {\r\n            div.remove()\r\n        })\r\n        global.notifySocket.on('member_quit', dt => {\r\n            let id = JSON.parse(dt).peerId\r\n            console.log(id)\r\n            if (id === peerData.peerId)\r\n            call.close() //fix here\r\n        })\r\n    }\r\n\r\n    const hangup = () => {\r\n        global.notifySocket.emit('quit-group-call', { peerId: peerId, groupId: groupId })\r\n        let video = document.getElementById('local-video')\r\n        let mediaStream = video.srcObject\r\n        mediaStream.getTracks().forEach(track => track.stop())\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        const peer = new Peer(userId, {host: domain, secure: true, path: '/call-video'})\r\n        peer.on('open', id => console.log(\"GROUP CALL PEER ID: \", id))\r\n        peer.on('error', err => {\r\n            console.log(err)\r\n        })\r\n        peer.on('disconnected', ()=> {\r\n            console.log(\"DIS\")\r\n        })\r\n\r\n        startCall(peer)\r\n\r\n        dragElement(document.getElementById(\"video-call-gr\"))\r\n        return () => {\r\n            global.notifySocket.off('receive_reply_peerId')\r\n            global.notifySocket.off('end-call')\r\n            global.notifySocket.off('member_join')\r\n            global.notifySocket.off('member_quit')\r\n            peer.destroy()\r\n        }\r\n\r\n    }, [])\r\n\r\n    const minimize = () => {\r\n        document.getElementById('video-call-gr').setAttribute('class', 'minimize')\r\n        document.getElementById('minimize-btn').setAttribute('class', 'min-item')\r\n    }\r\n    const maximize = () => {\r\n        document.getElementById('video-call-gr').setAttribute('class', 'maximize')\r\n        document.getElementById('minimize-btn').setAttribute('class', 'hide-min-item')\r\n    }\r\n    return (\r\n        <div>\r\n            <div id=\"video-call-gr\" className=\"maximize\">\r\n                <div id=\"video-call-grheader\">\r\n                    <div className=\"info\">\r\n                        \r\n                            <div style={{ width:30, height:30, borderRadius: 15, backgroundColor:'green'}} ></div>\r\n                        \r\n                        <div className=\"video-call-name\">\r\n                            {groupName}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"action\">\r\n                        <button onClick={minimize}>\r\n\r\n                            <MinimizeIcon style={{ color: \"#5f18af\" }} />\r\n                        </button>\r\n                        <button onClick={closeVideoCall}>\r\n                            <CloseIcon style={{ color: \"red\" }} />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"remote-videoo\">\r\n                    <div className=\"video-item\" >\r\n                        <p>{localStorage.getItem('name')}</p>\r\n                        <video className=\"local-video\" autoPlay id=\"local-video\" muted={!micOn}></video>\r\n                    </div>\r\n                </div>\r\n                <div id=\"video-frame\" className=\"video-frame\" >\r\n                    <div className=\"handle-btn\">\r\n                        {\r\n                            isCalling ?\r\n                                <button onClick={closeVideoCall}>\r\n                                    <CallEndIcon style={{ color: \"red\" }} />\r\n                                </button>\r\n                                :\r\n                                <button onClick={startCall}>\r\n                                    <CallIcon style={{ color: \"green\" }} />\r\n\r\n                                </button>\r\n                        }\r\n                        {\r\n                            micOn ?\r\n                                <button onClick={handleMic}>\r\n                                    <MicOffIcon style={{ color: \"gray\" }} />\r\n                                </button>\r\n                                :\r\n                                <button onClick={handleMic}>\r\n                                    <MicIcon style={{ color: \"black\" }} />\r\n                                </button>\r\n                        }\r\n                        {\r\n                            camOn ?\r\n                                <button>\r\n                                    <VideocamOffIcon style={{ color: \"gray\" }} />\r\n                                </button>\r\n                                :\r\n                                <buttom>\r\n                                    <VideocamIcon style={{ color: \"black\" }} />\r\n                                </buttom>\r\n                        }\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n                <Dialog\r\n                    open={openAlert}\r\n                    onClose={closeAlert}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Close will end this call?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            Do you want to continue?\r\n                    </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={closeAlert} color=\"primary\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button onClick={agreeAlert} color=\"primary\" autoFocus>\r\n                            End call\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n            <button id=\"minimize-btn\" onClick={maximize} title={groupName}>\r\n                <div className=\"min-item-badge\" >\r\n                    <div className=\"badge-icon\">\r\n                        <VideocamIcon style={{ color: \"red\" }} />\r\n                    </div>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoC;\r\n",["151","152"],"D:\\20201\\Project3\\chat\\src\\utils\\dragElement.js",[],["153","154"],"D:\\20201\\Project3\\chat\\src\\pages\\home\\Messages.js",["155","156","157","158","159","160","161","162","163","164"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport ReceiveMes from '../../components/ReceiveMes'\r\nimport SendMes from '../../components/SendMes'\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\n\r\nimport './Message.css'\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\nconst SEND_MESSAGE = gql`\r\n    mutation SendMessage($senderId: String!, $receiverId: String!, $content: String!){\r\n        sendMessage(senderId: $senderId, receiverId: $receiverId, content: $content){\r\n            status\r\n        }\r\n    }\r\n`\r\nconst GET_CONVERSATION = gql`\r\n    query GetConversation($senderId: String!, $receiverId: String!){\r\n        getConversation(senderId: $senderId, receiverId: $receiverId){\r\n            content{\r\n                time\r\n                content\r\n            }\r\n        }\r\n    }\r\n\r\n`\r\n\r\n\r\nconst Messages = props => {\r\n\r\n\r\n    const {data } = props\r\n\r\n    const userId = localStorage.getItem(\"id\")\r\n    const userName = localStorage.getItem(\"name\")\r\n    const [SendMessage] = useMutation(SEND_MESSAGE)\r\n    const [messageText, setMessageText] = useState('')\r\n    const [VideoView, setVideoView] = useState(null)\r\n    const [isInCall, setIsInCall] = useState(false)\r\n    const [busyAlert, setBusyAlert] = useState(false)\r\n\r\n\r\n    const contactId = data.contact.id\r\n    const contactName = data.contact.name\r\n    const [remoteName, setRemoteName] = useState(contactName)\r\n    const [messages, setMessages] = useState('')\r\n\r\n\r\n    const sendMessage = (content) => {\r\n        SendMessage({ variables: { senderId: userId, receiverId: contactId, content: content } })\r\n\r\n            .then((res) => {\r\n                if (res.data.sendMessage.status) {\r\n                    setMessages([...messages, { sender: userId, content: content },])\r\n                }\r\n                setMessageText('')\r\n            })\r\n    }\r\n\r\n\r\n    const onChangeMessage = e => setMessageText(e.target.value)\r\n    global.chatSocket.on('receive-msg', (data) => {\r\n        console.log(data)\r\n        if (data.senderId === contactId)\r\n            setMessages([...messages, { sender: contactId, content: data.msg }])\r\n    })\r\n    useEffect(() => {\r\n        setMessages(data.msgData)\r\n    }, [data.msgData])\r\n\r\n   \r\n    return (\r\n        <div className=\"message\" >\r\n            <div className=\"chat-header-bar\" >\r\n                <div style={{ fontWeight: \"bold\", fontSize: 20 }}>{data.contact.name}</div>\r\n                {\r\n                    data.contact.id !== undefined &&\r\n                    <button onClick={() => {\r\n                        setIsInCall(true)\r\n                        global.startCall(contactId, contactName)\r\n                    }} >\r\n                        <VideocamIcon />\r\n                    </button>\r\n                }\r\n            </div>\r\n            <div className=\"content\">\r\n                {messages !== '' ? messages.map((msg, idx) => msg.sender === userId ? <SendMes content={msg.content} /> : <ReceiveMes content={msg.content} />) : ''}\r\n            </div>\r\n            <div className=\"input\">\r\n                <input value={messageText} onChange={onChangeMessage} />\r\n                <button onClick={() => {\r\n                    sendMessage(messageText)\r\n                }} ><SendIcon /></button>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages","D:\\20201\\Project3\\chat\\src\\reportWebVitals.js",[],["165","166"],"D:\\20201\\Project3\\chat\\src\\components\\NotifyItem.js",["167"],"import React, {useState} from 'react';\r\nimport './NotifyItem.css'\r\nimport { Button} from '@material-ui/core/';\r\nimport {gql, useMutation} from '@apollo/client'\r\n\r\nconst ACCEPT_REQUEST = gql`\r\n    mutation AcceptFriend($userId: String!, $contactId: String!, $type: String!){\r\n        acceptFriend(userId: $userId, contactId: $contactId, type: $type){\r\n            userId\r\n            contactId\r\n            status\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nconst NotifyItem = (props) => {\r\n    const userId = localStorage.getItem(\"id\")\r\n    const [success, setSuccess] = useState(false)\r\n    const [AcceptFriend] = useMutation(ACCEPT_REQUEST)\r\n    const acceptRequest = () => {\r\n        AcceptFriend({variables:{ userId: userId, contactId: props.value.senderId, type: props.value.type }})\r\n        .then((data)=>{\r\n            if (data.data.acceptFriend.status === true) {\r\n                setSuccess(true)\r\n                global.refetchFriendList()\r\n            }\r\n        })\r\n    }\r\n\r\n    const cancelRequest = () => {\r\n        return\r\n    }\r\n    return (\r\n        <div className=\"notify-item\">\r\n            {props.value.isRead ? \"Friend request is accepted\" : props.value.type}\r\n            {\r\n                props.value.isRead===false && success===false && !props.value.type.includes('Accepted')\r\n                && \r\n                <div className=\"button-div\">\r\n                    <Button size=\"small\"\r\n                        disabled={success}\r\n                        onClick={acceptRequest}\r\n                        style={{\r\n                            backgroundColor:\"#5f18af\",\r\n                             color: '#fff', \r\n                             fontSize:14, \r\n                             textTransform:'capitalize'\r\n                            }}\r\n                        >Accept</Button>\r\n                    <Button\r\n                    size=\"small\"\r\n                        color=\"#5f18af\"\r\n                        style={{\r\n                            border :'2px solid #5f18af',\r\n                            \r\n                            fontSize:14, \r\n                            textTransform:'capitalize'\r\n                            }}\r\n                    >Cancel</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotifyItem;\r\n",["168","169"],"D:\\20201\\Project3\\chat\\src\\components\\FoundUser.js",["170"],"import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport './FoundUser.css'\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\nconst ADD_FRIEND = gql`\r\n    mutation AddFriend($userId: String!, $contactId: String! ){\r\n        addFriend(userId: $userId, contactId: $contactId){\r\n            id\r\n            contactId\r\n            status\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        textTransform: 'capitalize',\r\n        height: 35,\r\n        marginRight: 20\r\n    },\r\n}));\r\n\r\nconst FoundUser = (props) => {\r\n    const [AddFriend, d] = useMutation(ADD_FRIEND)\r\n    const buttonText = props.status === \"pending\" ? \"Cancel Request\" : props.status === \"accept\" ? \"Accepted\" : \"Add Friend\"\r\n    const [button, setButton] = useState(buttonText)\r\n    const [status, setStatus] = useState(props.status)\r\n    const onClickAddFriend = () => {\r\n        let userId = localStorage.getItem(\"id\")\r\n        AddFriend({\r\n            variables: {\r\n                userId: userId,\r\n                contactId: props.contactId\r\n            }\r\n        })\r\n            .then(data => {\r\n                setButton(\"Cancel Request\")\r\n                setStatus(\"pending\")\r\n            })\r\n    }\r\n\r\n    const onClickUnFriend = () => {\r\n        console.log(\"Cancelreqyest\")\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"user-item\">\r\n            <div className=\"ava-name\">\r\n                <Avatar>\r\n                    <ImageIcon />\r\n                </Avatar>\r\n                <div className=\"name\" >{props.name}</div>\r\n            </div>\r\n\r\n            <Button\r\n                onClick={status === \"none\" ? onClickAddFriend : onClickUnFriend}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                className={classes.button}\r\n                startIcon={<PersonAddIcon />}\r\n            >\r\n                {button}\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FoundUser;\r\n","D:\\20201\\Project3\\chat\\src\\pages\\home\\TabBar.js",["171","172","173","174","175"],"D:\\20201\\Project3\\chat\\src\\index.js",[],"D:\\20201\\Project3\\chat\\src\\components\\PrivateRoute.js",[],"D:\\20201\\Project3\\chat\\src\\components\\PublicRoute.js",[],"D:\\20201\\Project3\\chat\\src\\components\\ReceiveMes.js",[],["176","177"],"D:\\20201\\Project3\\chat\\src\\components\\ReceiveMesGroup.js",[],["178","179"],"D:\\20201\\Project3\\chat\\src\\pages\\home\\ChatList.js",["180","181","182","183","184","185","186","187","188"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport Message from './Messages'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ChatListItem from '../../components/ChatListItem'\r\nimport GroupListItem from './../../components/GroupListItem'\r\nimport { useQuery, gql, useMutation } from '@apollo/client'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport JoinGroup from '@material-ui/icons/AddCircleOutlined';\r\nimport ModalAddUserToGroup from './../../components/ModalAddUserToGroup';\r\nimport ModalJoinGroup from './../../components/ModalJoinGroup';\r\nimport CreateGroup from '@material-ui/icons/BorderColor';\r\nimport './index.css'\r\nimport MessagesGroup from './MessagesGroup'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 300,\r\n        backgroundColor: \"#f8f8ff\",\r\n    },\r\n    item: {\r\n        height: 60,\r\n        marginBottom: 5,\r\n        backgroundColor: \"#fff\",\r\n        marginRight: 5,\r\n        '&:hover': { backgroundColor: \"#f8f8ff\" }\r\n    }\r\n}));\r\n\r\nconst GET_FRIEND = gql`\r\n    query GetFriendList ($userId: String!){\r\n        getFriendList(userId: $userId){\r\n            id\r\n            name\r\n        }\r\n\r\n        getGroupList (userId: $userId) {\r\n            id\r\n            name\r\n            admin\r\n            code\r\n        }\r\n    }\r\n`\r\n\r\nconst GET_CONVERSATION = gql`\r\n    mutation GetConversation($senderId: String!, $receiverId: String!){\r\n        getConversation(senderId: $senderId, receiverId: $receiverId){\r\n            receiverId\r\n            text{\r\n                sender\r\n                time\r\n                content\r\n            }\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst GET_GROUP_CONVERSATION = gql`\r\n    mutation GetGroupConversation($userId: String!, $id: String!) {\r\n        getGroupConversation (userId: $userId, id: $id) {\r\n            id\r\n            admin\r\n            member\r\n            message {\r\n                senderId\r\n                senderName\r\n                content\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ChatList = props => {\r\n\r\n    const classes = useStyles();\r\n    const [videoIndex, setVideoIndex] = useState(0)\r\n\r\n    const [conversationData, setConversationData] = useState({ contact: '', msgData: '' })\r\n    const [groupConversationData, setGroupConversationData] = useState({ groupName: '', messGroup: '' })\r\n    const [statusChatUser, setStatusChatUser] = useState(false)\r\n    const [loadingConversation, setLoadingConversation] = useState(true)\r\n    const [status, setStatus] = useState('')\r\n\r\n    const userId = localStorage.getItem(\"id\")\r\n\r\n    const [GetConversation] = useMutation(GET_CONVERSATION)\r\n    const [GetGroupConversation] = useMutation(GET_GROUP_CONVERSATION)\r\n\r\n\r\n    const { loading, error, data, refetch } = useQuery(GET_FRIEND, { variables: { userId: userId } })\r\n    \r\n    if (loading) return (\r\n        <div className=\"chat-list\">\r\n            <CircularProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n    if (error) return `Error: ${error.message}`\r\n    \r\n    else {\r\n\r\n        const changeConversation = async (index) => {\r\n            let res = await onChangeConversation(userId, data.getFriendList[index].id)\r\n            let passData = {\r\n                contact: data.getFriendList[index],\r\n                msgData: res.data.getConversation.text\r\n            }\r\n            setConversationData(passData)\r\n            setStatus('friend')\r\n        }\r\n        const onChangeConversation = async (senderId, receiverId) => {\r\n            let res = await GetConversation({ variables: { senderId: senderId, receiverId: receiverId } })\r\n            return res\r\n\r\n        }\r\n\r\n        const changeGroupConversation = (index) => {\r\n            console.log(data.getGroupList[index]);\r\n            GetGroupConversation({ variables: { userId: userId, id: data.getGroupList[index].id } })\r\n                .then(res => {\r\n                    // console.log(res.data.getGroupConversation.member);\r\n                    let memberGroup = res.data.getGroupConversation.member\r\n                    memberGroup = memberGroup.concat([res.data.getGroupConversation.admin])\r\n                    let dataInGroup = {\r\n                        idGroup: data.getGroupList[index].id,\r\n                        codeGroup: data.getGroupList[index].code,\r\n                        groupName: data.getGroupList[index].name,\r\n                        messGroup: res.data.getGroupConversation.message,\r\n                        memberGroup: memberGroup\r\n                    }\r\n                    let dataJoinRoom = {\r\n                        idGroup: data.getGroupList[index].id,\r\n                        memberGroup: memberGroup,\r\n                        senderId: userId\r\n                    }\r\n                    global.chatSocket.emit('join-room-chat', dataJoinRoom)\r\n                    // console.log(res.data.getGroupConversation.message);\r\n                    setGroupConversationData(dataInGroup)\r\n                    setStatus('group')\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n\r\n        global.chatSocket.on('res-create-new-group', (data) => {\r\n            if (data.status === true) {\r\n                refetch()\r\n            }\r\n        })\r\n\r\n        global.chatSocket.on('res-join-group', (data) => {\r\n            if (data.status === true) {\r\n                refetch()\r\n            }\r\n        })\r\n\r\n\r\n        global.refetchFriendList = refetch\r\n\r\n        return (\r\n            <div className=\"chat-list\">\r\n\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className=\"search-message\">\r\n                        <SearchIcon />\r\n                        <input placeholder=\"Seacrh message...\" />\r\n                    </div>\r\n                    <div>\r\n                        <CreateGroup\r\n                            style={{ margin: '15px 0px' }}\r\n                            data-toggle=\"modal\" data-target=\"#addGroupChatRoom\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <JoinGroup\r\n                            style={{ margin: '15px auto' }}\r\n                            data-toggle=\"modal\" data-target=\"#joinGroup\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"friends\">\r\n                    <List className={classes.root} component=\"nav\">\r\n                        {data.getFriendList.map((item, index) => (\r\n                            <ChatListItem key={item.id} name={item.name} index={index} changeConversation={changeConversation} />\r\n                        ))}\r\n\r\n                        {data.getGroupList.map((item, index) => (\r\n                            <GroupListItem key={item.id} groupName={item.name} indexGroup={index} changeGroupConversation={changeGroupConversation} />\r\n                        ))}\r\n\r\n                    </List>\r\n                </div>\r\n\r\n                <div className=\"conversation\">\r\n                    {status === 'friend' && <Message peerId={props.peerId} peer={props.peer} data={conversationData} />}\r\n                    {status === 'group' && <MessagesGroup  dataGroup={groupConversationData} />}\r\n\r\n                </div>\r\n\r\n                <div className=\"modal fade\" id=\"addGroupChatRoom\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"addGroupChatRoom\" aria-hidden=\"true\">\r\n                    <ModalAddUserToGroup />\r\n                </div>\r\n\r\n\r\n                <div className=\"modal fade\" id=\"joinGroup\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"joinGroup\" aria-hidden=\"true\">\r\n                    <ModalJoinGroup />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatList","D:\\20201\\Project3\\chat\\src\\components\\ModalJoinGroup.js",["189","190"],"import React,{useState} from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport {useQuery, gql, useMutation} from '@apollo/client'\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './FoundUser.css'\r\n\r\nconst JOIN_GROUP = gql`\r\n    mutation JoinGroup($userId: String!, $code: String!) {\r\n        joinGroup(userId: $userId, code: $code) {\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nconst ModalJoinGroup = () => {\r\n    const classes = useStyles();\r\n    const currentUserId = localStorage.getItem('id')\r\n    const [codeGroup, setCodeGroup] = useState('')\r\n    const [joinGroup, result] = useMutation(JOIN_GROUP)\r\n    const [notifyCodeGroup, setNotifyCodeGroup] = useState('')\r\n\r\n    const onChangeValue = (e) => {\r\n        setCodeGroup(e.target.value)\r\n    }\r\n\r\n    const onClickJoinGroup = (e) => {\r\n        e.preventDefault()\r\n        if (codeGroup !== '') {\r\n            joinGroup({\r\n                variables: {userId: currentUserId, code: codeGroup}\r\n            })\r\n            .then(res => {\r\n                if (res.data.joinGroup.status === 'success') {\r\n                    global.chatSocket.emit('join-group', {status: true})\r\n                    setCodeGroup('')\r\n                    setNotifyCodeGroup(\"Join group success\")\r\n                } else if (res.data.joinGroup.status === 'group-not-found'){\r\n                    setCodeGroup('')\r\n                    setNotifyCodeGroup('Group not found')\r\n                } else if (res.data.joinGroup.status === 'exists') {\r\n                    setCodeGroup('')\r\n                    setNotifyCodeGroup('You are already in the group')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setCodeGroup('')\r\n                setNotifyCodeGroup(err)\r\n            })\r\n        } else {\r\n            setNotifyCodeGroup('You have not entered code group')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"modal-dialog\" role=\"document\">\r\n            <div className=\"modal-content\" style={{width:'700px', height: '500px'}}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Join Group</h5>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">×</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <div className=\"row\" style={{marginLeft: '120px'}}>\r\n                        <div className=\"search-message w-50\">\r\n                            <SearchIcon />\r\n                            <input placeholder=\"Enter code group...\" onChange={onChangeValue} value={codeGroup}/>\r\n                        </div>\r\n                        <div className=\"w-20\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                className={classes.button}\r\n                                onClick={onClickJoinGroup}\r\n                            >\r\n                                Continue\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{marginLeft: '150px'}}>\r\n                        <p className=\"text-center font-weight-bold mt-2\">{notifyCodeGroup}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        textTransform: 'capitalize',\r\n        height: 35,\r\n        marginRight: 20\r\n    },\r\n}));\r\n\r\nexport default ModalJoinGroup","D:\\20201\\Project3\\chat\\src\\pages\\home\\SideBar.js",["191","192","193","194","195"],"D:\\20201\\Project3\\chat\\src\\pages\\signup\\index.js",["196","197"],"import React, {useState} from 'react'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport './../login/index.css'\r\nimport logo from './../login/images/img-01.png'\r\nimport { useQuery, gql, useMutation } from '@apollo/client';\r\n\r\nconst SIGNUP = gql`\r\n    mutation SignUp($email: String!, $name: String!, $password: String!){\r\n        signup ( newUser: {email: $email, name: $name, password: $password}){\r\n            user{\r\n                id\r\n                name\r\n            }\r\n            token\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst SignUp = props => {\r\n    const history = useHistory()\r\n    const [email, setemail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirm, setConfirm] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [match, setMatch] = useState('') \r\n    const [signup, {data}] = useMutation(SIGNUP)\r\n    const [fail, setFailed] = useState('')\r\n\r\n    const onChangeemail = (e)=> setemail(e.target.value)\r\n    const onChangeName = (e)=> setName(e.target.value)\r\n    const onChangePassword = (e)=> setPassword(e.target.value)\r\n    const onChangeConfirm = (e)=> {\r\n        setConfirm(e.target.value)\r\n        if (e.target.value === password) {\r\n            setMatch(true)\r\n        }\r\n        else setMatch(false)\r\n    }\r\n    const onSignUp = (e) => {\r\n        e.preventDefault()        \r\n        signup({variables: {email: email, name:name, password: password}})\r\n        .then(res => {\r\n            localStorage.setItem(\"access-token\", res.data.signup.token)\r\n            localStorage.setItem(\"name\", res.data.signup.user.name)\r\n            localStorage.setItem(\"id\", res.data.signup.user.id)\r\n            history.push(`/home`)\r\n        })\r\n        .catch(err => {\r\n            setFailed(err.message)\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"limiter\">\r\n            <div className=\"container-login100\">\r\n                <div className=\"wrap-login100\">\r\n                    <div className=\"login100-pic js-tilt\" data-tilt>\r\n                        <img src={logo} alt=\"IMG\" />\r\n                    </div>\r\n\r\n                    <form className=\"login100-form\">\r\n                        <span className=\"login100-form-title\">\r\n                            Member Register\r\n                        </span>\r\n\r\n                        <div className=\"wrap-input100 validate-input\">\r\n                            <input className=\"input100\" type=\"email\" name=\"email\" placeholder=\"email\" onChange={onChangeemail} value={email} />\r\n                            <span className=\"focus-input100\" />\r\n                            <span className=\"symbol-input100\">\r\n                            <i className=\"fas fa-user\" aria-hidden=\"true\"></i>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"wrap-input100 validate-input\">\r\n                            <input className=\"input100\" type=\"text\" name=\"name\" placeholder=\"Name\" onChange={onChangeName} value={name} />\r\n                            <span className=\"focus-input100\" />\r\n                            <span className=\"symbol-input100\">\r\n                            <i className=\"fa fa-envelope\" aria-hidden=\"true\" />\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"wrap-input100 validate-input\" data-validate=\"Password is required\">\r\n                            <input className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"Password\" onChange={onChangePassword} value={password} />\r\n                            <span className=\"focus-input100\" />\r\n                            <span className=\"symbol-input100\">\r\n                            <i className=\"fa fa-lock\" aria-hidden=\"true\" />\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"wrap-input100 validate-input\" data-validate=\"Password is required\">\r\n                            <input className=\"input100\" type=\"password\" name=\"re-pass\" placeholder=\"Re-Password\" onChange={onChangeConfirm} value={confirm} />\r\n                            <span className=\"focus-input100\" />\r\n                            <span className=\"symbol-input100\">\r\n                            <i className=\"fa fa-lock\" aria-hidden=\"true\" />\r\n                            </span>\r\n                            {match === false  && <span style={{color:\"red\"}}>Invalid</span>}\r\n                            <p span style={{color:\"red\", textAlign:'center'}} > {fail}</p>\r\n                        </div>\r\n\r\n                        <div className=\"container-login100-form-btn\">\r\n                            <button className=\"login100-form-btn\" onClick={onSignUp}>\r\n                                Register\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"text-center p-t-136\">\r\n                            <Link className=\"txt2\" to=\"/login\">\r\n                                You are already an account ? \r\n                                <i className=\"fa fa-arrow-right m-l-5\" aria-hidden=\"true\" />\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SignUp","D:\\20201\\Project3\\chat\\src\\pages\\home\\MessagesGroup.js",["198","199"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport ReceiveMesGroup from '../../components/ReceiveMesGroup'\r\nimport SendMes from '../../components/SendMes'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport './Message.css'\r\nimport {gql, useMutation, useQuery} from '@apollo/client'\r\nimport VideocamIcon from '@material-ui/icons/Videocam'\r\nimport VideoCallGroup from './VideoCallGroup'\r\n\r\nconst SEND_MESS_GROUP = gql`\r\n    mutation SendMessGroup($senderId: String!, $idGroup: String!, $content: String!) {\r\n        sendMessGroup(senderId: $senderId, idGroup: $idGroup, content: $content) {\r\n            senderId\r\n            senderName\r\n            content\r\n        }\r\n    }\r\n`\r\n\r\nconst MessagesGroup = props => {\r\n\r\n    const currentUserId = localStorage.getItem(\"id\")\r\n    const idGroup = props.dataGroup.idGroup\r\n    const memberGroup = props.dataGroup.memberGroup\r\n    const [messTextGroup, setMessTextGroup] = useState('')\r\n    const [SendMessGroup] = useMutation(SEND_MESS_GROUP)\r\n    const [messagesGroup, setMessagesGroup] = useState('')\r\n    const [videoView, setVideoView] = useState(null)\r\n\r\n\r\n    const onChangeMessGroup = (e) => {\r\n        setMessTextGroup(e.target.value)\r\n    }\r\n\r\n    const sendMessToGroup = (content) => {\r\n        SendMessGroup({variables: {senderId: currentUserId, idGroup: idGroup, content: content}})\r\n        .then((res) => {\r\n            setMessagesGroup([...messagesGroup, {senderId: res.data.sendMessGroup.senderId, senderName: res.data.sendMessGroup.senderName, content: content}])\r\n            setMessTextGroup('')\r\n            global.chatSocket.emit('send-mess-group', {memberGroup: memberGroup, idGroup: idGroup, content: content, senderName: res.data.sendMessGroup.senderName, senderId: res.data.sendMessGroup.senderId})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    global.chatSocket.on('res-send-mess-group', (data)=>{\r\n        console.log(data);\r\n        setMessagesGroup([ ...messagesGroup, {senderId: data.senderId, senderName: data.senderName, content: data.content}])         \r\n    })\r\n\r\n    const call = (groupId, groupName) => {\r\n        let Videov = (<VideoCallGroup\r\n            groupId={groupId}\r\n            groupName={groupName}\r\n            setVideoView={setVideoView}\r\n        />)\r\n        setVideoView(Videov)\r\n    }\r\n\r\n\r\n    const joinCall = ()=> {\r\n        call(props.dataGroup.codeGroup, props.dataGroup.groupName )\r\n    }\r\n    useEffect(() => {\r\n        setMessagesGroup(props.dataGroup.messGroup)\r\n    }, [props.dataGroup.messGroup])\r\n\r\n    return (\r\n        <div className=\"message\" >\r\n            <div className=\"chat-header-bar\" >\r\n                <div style={{ fontWeight: \"bold\", fontSize: 20 }}>{props.dataGroup.groupName} {props.dataGroup.codeGroup}</div>\r\n                <button onClick={joinCall}>\r\n                    <VideocamIcon />\r\n                </button>\r\n            </div>\r\n            <div className=\"content\">\r\n                {messagesGroup !== '' ? messagesGroup.map((msg, idx) => msg.senderId === currentUserId ? <SendMes content={msg.content} /> : <ReceiveMesGroup name={msg.senderName} content={msg.content} />) : ''}\r\n            </div>\r\n            <div className=\"input\">\r\n                <input value={messTextGroup} onChange={onChangeMessGroup}/>\r\n                <button onClick={() => {sendMessToGroup(messTextGroup)}}><SendIcon /></button>\r\n            </div>\r\n            {videoView}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessagesGroup","D:\\20201\\Project3\\chat\\src\\components\\ChatListItem.js",["200","201","202","203","204"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    item: {\r\n        height: 60,\r\n        marginBottom: 5,\r\n        backgroundColor: \"#fff\",\r\n        marginRight: 5,\r\n        '&:hover': { backgroundColor: \"#f8f8ff\" }\r\n    }\r\n}));\r\n\r\nconst ChatListItem = props => {\r\n    const changeConversation = useCallback(()=>{\r\n        props.changeConversation(props.index)\r\n    })\r\n    const classes = useStyles()\r\n    return (\r\n\r\n        <ListItem button  className={classes.item}  onClick={changeConversation} >\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    <ImageIcon />\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={props.name} secondary=\"Oct 10, 2020\" />\r\n        </ListItem>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatListItem","D:\\20201\\Project3\\chat\\src\\pages\\start\\index.js",["205"],"D:\\20201\\Project3\\chat\\src\\pages\\login\\index.js",["206","207","208","209"],"D:\\20201\\Project3\\chat\\src\\pages\\home\\VideoC.js",["210","211","212","213","214"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport CallEndIcon from '@material-ui/icons/CallEnd';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport { dragElement } from '../../utils/dragElement'\r\n\r\nimport './VideoCall.css'\r\n\r\nconst VideoC = (props) => {\r\n\r\n\r\n    const { action, peer, peerId, contactId, socket } = props\r\n    const [friendPeerId, setCalleePeerId] = useState('')\r\n    const [isCalling, setIsCalling] = useState(false)\r\n    const [micOn, setMicOn] = useState(true)\r\n    const [camOn, setCamOn] = useState(true)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n\r\n\r\n    const sendData = (event, data) => {\r\n        socket.emit(event, JSON.stringify(data))\r\n    }\r\n    const handleMic = () => {\r\n        setMicOn(!micOn)\r\n    }\r\n    const closeVideoCall = () => {\r\n        setOpenAlert(true)\r\n    }\r\n    const closeAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n    const agreeAlert = () => {\r\n        hangup()\r\n    }\r\n\r\n    const startCall = async () => {\r\n        sendData(\"start_a_call\", {\r\n            callerId: localStorage.getItem('id'),\r\n            calleeId: contactId,\r\n            callerName: localStorage.getItem('name')\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    const hangup = () => {\r\n        socket.emit('end-call', {calleeId: contactId})\r\n        \r\n        let video = document.getElementById('local-video')\r\n        let mediaStream = video.srcObject\r\n        mediaStream.getTracks().forEach(track => track.stop())\r\n        props.setBusy(false)\r\n        props.setCallWindow(null)\r\n        // peer.reconnect()\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('receive_reply_peerId', async dt => {\r\n            try {\r\n                setIsCalling(true)\r\n                console.log(dt.calleePeerId)\r\n                setCalleePeerId(dt.calleePeerId)\r\n                let stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n                document.getElementById('local-video').srcObject = stream\r\n                const call = peer.call(dt.calleePeerId, stream)\r\n                call.on('stream', remoteStream => {\r\n                    document.getElementById('remote-video').srcObject = remoteStream\r\n                })\r\n                console.log(stream)\r\n            } catch (error) {\r\n\r\n            }\r\n        })\r\n    \r\n        peer.on('call', async (call) => {\r\n            try {\r\n                console.log(\"ON RECEIVE CALL\")\r\n                setIsCalling(true)\r\n\r\n                let stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n                document.getElementById('local-video').srcObject = stream\r\n                call.answer(stream)\r\n                call.on('stream', remoteStream => {\r\n                    document.getElementById('remote-video').srcObject = remoteStream\r\n                })\r\n            }\r\n            catch (e) {\r\n\r\n            }\r\n        })\r\n        socket.on('end-call', ()=> {\r\n            setIsCalling(false)\r\n\r\n        })           \r\n        if (action === \"start_a_call\") {\r\n            startCall()\r\n        }\r\n        dragElement(document.getElementById(\"video-call\"))\r\n        return () => {\r\n            socket.off('receive_reply_peerId')\r\n            socket.off('end-call')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div id=\"video-call\">\r\n            <div id=\"video-callheader\">\r\n                <div className=\"info\">\r\n                    <div>\r\n                        <img src=\"https://scontent-hkg4-2.xx.fbcdn.net/v/t1.0-9/125233232_3743178699108570_6642470821502695124_o.png?_nc_cat=111&ccb=2&_nc_sid=730e14&_nc_ohc=zpXUSOoAiHgAX8OrANx&_nc_ht=scontent-hkg4-2.xx&oh=73fca147f94188c441f642dbc7b103ab&oe=5FD0352A\" width=\"50px\" height=\"50px\" style={{ borderRadius: '25px' }} />\r\n                    </div>\r\n                    <div className=\"video-call-name\">\r\n                        {props.calleeName}\r\n                    </div>\r\n                </div>\r\n                <div className=\"action\">\r\n                    <button >\r\n\r\n                        <MinimizeIcon style={{ color: \"#5f18af\" }} />\r\n                    </button>\r\n                    <button onClick={closeVideoCall}>\r\n                        <CloseIcon style={{ color: \"red\" }} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"video-frame\" >\r\n                <div className=\"handle-btn\">\r\n                    {\r\n                        isCalling ?\r\n                            <button onClick={() => { socket.emit('end-call', { calleeId: contactId }); hangup() }}>\r\n                                <CallEndIcon style={{ color: \"red\" }} />\r\n                            </button>\r\n                            :\r\n                            <button onClick={startCall}>\r\n                                <CallIcon style={{ color: \"green\" }} />\r\n\r\n                            </button>\r\n                    }\r\n                    {\r\n                        micOn ?\r\n                            <button onClick={handleMic}>\r\n                                <MicOffIcon style={{ color: \"gray\" }} />\r\n                            </button>\r\n                            :\r\n                            <button onClick={handleMic}>\r\n                                <MicIcon style={{ color: \"black\" }} />\r\n                            </button>\r\n                    }\r\n                    {\r\n                        camOn ?\r\n                            <button>\r\n                                <VideocamOffIcon style={{ color: \"gray\" }} />\r\n                            </button>\r\n                            :\r\n                            <buttom>\r\n                                <VideocamIcon style={{ color: \"black\" }} />\r\n                            </buttom>\r\n                    }\r\n\r\n                </div>\r\n                <video className=\"video\" autoPlay id=\"local-video\" muted={!micOn}></video>\r\n                <video className=\"video\" autoPlay id=\"remote-video\" muted></video>\r\n\r\n            </div>\r\n            <Dialog\r\n                open={openAlert}\r\n                onClose={closeAlert}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Close will end this call?\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Do you want to continue?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeAlert} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={agreeAlert} color=\"primary\" autoFocus>\r\n                        End call\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default VideoC;\r\n","D:\\20201\\Project3\\chat\\src\\components\\GroupListItem.js",["215","216","217","218"],"import React, { useEffect, useState } from 'react'\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    item: {\r\n        height: 60,\r\n        marginBottom: 5,\r\n        backgroundColor: \"#fff\",\r\n        marginRight: 5,\r\n        '&:hover': { backgroundColor: \"#f8f8ff\" }\r\n    }\r\n}));\r\n\r\nconst GroupListItem = props => {\r\n    const classes = useStyles()\r\n    return (\r\n\r\n        <ListItem button  className={classes.item} onClick={() => props.changeGroupConversation(props.indexGroup)}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    <ImageIcon />\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={props.groupName} secondary=\"Oct 10, 2020\" />\r\n        </ListItem>\r\n\r\n    )\r\n}\r\n\r\nexport default GroupListItem","D:\\20201\\Project3\\chat\\src\\components\\VideoCallProvider.js",["219","220"],"D:\\20201\\Project3\\chat\\src\\pages\\home\\SearchUser.js",["221","222","223"],"import React, { useState } from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport FoundUser from '../../components/FoundUser'\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\nconst SEARCH_USER = gql`\r\n    mutation SearchUser($name: String!){\r\n        searchByName (name: $name){\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nconst GET_CONTACT = gql`\r\n    mutation GetContact($userId: String!){\r\n        getUserContact(userId: $userId){\r\n            contactId\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nconst SearchUser = () => {\r\n    const [searchVal, setSearchVal] = useState('')\r\n    const [foundUsers, setFoundUsers] = useState([])\r\n    const [SearchUser, d] = useMutation(SEARCH_USER)\r\n    const [GetContact, e] = useMutation(GET_CONTACT)\r\n\r\n    const onChangeValue = (e) => {\r\n        console.log(e.target.value)\r\n        let value = e.target.value\r\n        setSearchVal(value)\r\n        if (value === '') {\r\n            setFoundUsers([])\r\n        }\r\n    }\r\n    const onPressSearch = async (e) => {\r\n        const myId = localStorage.getItem(\"id\")\r\n        function getOnlyOtherUser(user) {\r\n            return user.id !== myId\r\n        }\r\n\r\n        if (e.which === 13) {\r\n            \r\n            if (searchVal === '') return\r\n            let userFound = await SearchUser({ variables: { name: searchVal } })\r\n            let users = userFound.data.searchByName.filter(getOnlyOtherUser)\r\n       \r\n            let contactFound = await GetContact({variables: {userId: myId}}) \r\n            let contacts = contactFound.data.getUserContact\r\n\r\n            let acceptContact = contacts.filter((con)=>{return con.status===true}).map((con)=>con.contactId)\r\n            let pendingContact = contacts.filter((con)=>{return con.status===false}).map((con)=>con.contactId) //return id array\r\n\r\n            users.map((u, index) => {\r\n                if (pendingContact.includes(u.id)){\r\n                    users[index].status = \"pending\"\r\n                }else if(acceptContact.includes(u.id)){\r\n                    users[index].status = \"accept\"\r\n                }else {\r\n                    users[index].status = \"none\"\r\n                }\r\n            })\r\n\r\n            // console.log(users)\r\n            setFoundUsers(users)\r\n\r\n\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"search-user\">\r\n            <div className=\"search-message\">\r\n                <SearchIcon />\r\n                <input placeholder=\"Seacrh people...\" value={searchVal} onChange={onChangeValue} onKeyPress={onPressSearch} />\r\n            </div>\r\n            <div>\r\n                {foundUsers !== undefined && foundUsers !== [] && foundUsers.map(({ id, name, status }, indx) => (\r\n                    <FoundUser contactId={id} name={name} key={indx} status={status} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchUser;\r\n","D:\\20201\\Project3\\chat\\src\\components\\SendMes.js",[],"D:\\20201\\Project3\\chat\\src\\utils\\grpeer.js",["224"],"D:\\20201\\Project3\\chat\\src\\utils\\constant.js",[],{"ruleId":"225","severity":1,"message":"226","line":2,"column":43,"nodeType":"227","messageId":"228","endLine":2,"endColumn":47},{"ruleId":"225","severity":1,"message":"229","line":11,"column":9,"nodeType":"227","messageId":"228","endLine":11,"endColumn":15},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"225","severity":1,"message":"234","line":4,"column":9,"nodeType":"227","messageId":"228","endLine":4,"endColumn":17},{"ruleId":"225","severity":1,"message":"235","line":26,"column":25,"nodeType":"227","messageId":"228","endLine":26,"endColumn":31},{"ruleId":"230","replacedBy":"236"},{"ruleId":"232","replacedBy":"237"},{"ruleId":"225","severity":1,"message":"238","line":21,"column":17,"nodeType":"227","messageId":"228","endLine":21,"endColumn":23},{"ruleId":"225","severity":1,"message":"239","line":40,"column":19,"nodeType":"227","messageId":"228","endLine":40,"endColumn":27},{"ruleId":"240","severity":1,"message":"241","line":193,"column":8,"nodeType":"242","endLine":193,"endColumn":10,"suggestions":"243"},{"ruleId":"230","replacedBy":"244"},{"ruleId":"232","replacedBy":"245"},{"ruleId":"230","replacedBy":"246"},{"ruleId":"232","replacedBy":"247"},{"ruleId":"225","severity":1,"message":"248","line":1,"column":38,"nodeType":"227","messageId":"228","endLine":1,"endColumn":49},{"ruleId":"225","severity":1,"message":"249","line":17,"column":7,"nodeType":"227","messageId":"228","endLine":17,"endColumn":23},{"ruleId":"225","severity":1,"message":"250","line":36,"column":11,"nodeType":"227","messageId":"228","endLine":36,"endColumn":19},{"ruleId":"225","severity":1,"message":"251","line":39,"column":12,"nodeType":"227","messageId":"228","endLine":39,"endColumn":21},{"ruleId":"225","severity":1,"message":"252","line":39,"column":23,"nodeType":"227","messageId":"228","endLine":39,"endColumn":35},{"ruleId":"225","severity":1,"message":"253","line":40,"column":12,"nodeType":"227","messageId":"228","endLine":40,"endColumn":20},{"ruleId":"225","severity":1,"message":"254","line":41,"column":12,"nodeType":"227","messageId":"228","endLine":41,"endColumn":21},{"ruleId":"225","severity":1,"message":"255","line":41,"column":23,"nodeType":"227","messageId":"228","endLine":41,"endColumn":35},{"ruleId":"225","severity":1,"message":"256","line":46,"column":12,"nodeType":"227","messageId":"228","endLine":46,"endColumn":22},{"ruleId":"225","severity":1,"message":"257","line":46,"column":24,"nodeType":"227","messageId":"228","endLine":46,"endColumn":37},{"ruleId":"230","replacedBy":"258"},{"ruleId":"232","replacedBy":"259"},{"ruleId":"225","severity":1,"message":"260","line":31,"column":11,"nodeType":"227","messageId":"228","endLine":31,"endColumn":24},{"ruleId":"230","replacedBy":"261"},{"ruleId":"232","replacedBy":"262"},{"ruleId":"225","severity":1,"message":"263","line":31,"column":23,"nodeType":"227","messageId":"228","endLine":31,"endColumn":24},{"ruleId":"225","severity":1,"message":"229","line":17,"column":9,"nodeType":"227","messageId":"228","endLine":17,"endColumn":15},{"ruleId":"225","severity":1,"message":"238","line":17,"column":17,"nodeType":"227","messageId":"228","endLine":17,"endColumn":23},{"ruleId":"225","severity":1,"message":"264","line":32,"column":14,"nodeType":"227","messageId":"228","endLine":32,"endColumn":19},{"ruleId":"240","severity":1,"message":"265","line":53,"column":6,"nodeType":"242","endLine":53,"endColumn":10,"suggestions":"266"},{"ruleId":"225","severity":1,"message":"267","line":55,"column":9,"nodeType":"227","messageId":"228","endLine":55,"endColumn":20},{"ruleId":"230","replacedBy":"268"},{"ruleId":"232","replacedBy":"269"},{"ruleId":"230","replacedBy":"270"},{"ruleId":"232","replacedBy":"271"},{"ruleId":"225","severity":1,"message":"272","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"248","line":1,"column":38,"nodeType":"227","messageId":"228","endLine":1,"endColumn":49},{"ruleId":"225","severity":1,"message":"273","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"274","line":81,"column":12,"nodeType":"227","messageId":"228","endLine":81,"endColumn":22},{"ruleId":"225","severity":1,"message":"275","line":81,"column":24,"nodeType":"227","messageId":"228","endLine":81,"endColumn":37},{"ruleId":"225","severity":1,"message":"276","line":85,"column":12,"nodeType":"227","messageId":"228","endLine":85,"endColumn":26},{"ruleId":"225","severity":1,"message":"277","line":85,"column":28,"nodeType":"227","messageId":"228","endLine":85,"endColumn":45},{"ruleId":"225","severity":1,"message":"278","line":86,"column":12,"nodeType":"227","messageId":"228","endLine":86,"endColumn":31},{"ruleId":"225","severity":1,"message":"279","line":86,"column":33,"nodeType":"227","messageId":"228","endLine":86,"endColumn":55},{"ruleId":"225","severity":1,"message":"234","line":3,"column":9,"nodeType":"227","messageId":"228","endLine":3,"endColumn":17},{"ruleId":"225","severity":1,"message":"235","line":20,"column":23,"nodeType":"227","messageId":"228","endLine":20,"endColumn":29},{"ruleId":"225","severity":1,"message":"280","line":14,"column":8,"nodeType":"227","messageId":"228","endLine":14,"endColumn":25},{"ruleId":"225","severity":1,"message":"229","line":16,"column":9,"nodeType":"227","messageId":"228","endLine":16,"endColumn":15},{"ruleId":"225","severity":1,"message":"238","line":16,"column":17,"nodeType":"227","messageId":"228","endLine":16,"endColumn":23},{"ruleId":"225","severity":1,"message":"264","line":84,"column":14,"nodeType":"227","messageId":"228","endLine":84,"endColumn":19},{"ruleId":"240","severity":1,"message":"281","line":110,"column":6,"nodeType":"242","endLine":110,"endColumn":10,"suggestions":"282"},{"ruleId":"225","severity":1,"message":"234","line":5,"column":10,"nodeType":"227","messageId":"228","endLine":5,"endColumn":18},{"ruleId":"225","severity":1,"message":"283","line":28,"column":21,"nodeType":"227","messageId":"228","endLine":28,"endColumn":25},{"ruleId":"225","severity":1,"message":"248","line":1,"column":38,"nodeType":"227","messageId":"228","endLine":1,"endColumn":49},{"ruleId":"225","severity":1,"message":"234","line":6,"column":27,"nodeType":"227","messageId":"228","endLine":6,"endColumn":35},{"ruleId":"225","severity":1,"message":"272","line":1,"column":30,"nodeType":"227","messageId":"228","endLine":1,"endColumn":39},{"ruleId":"225","severity":1,"message":"284","line":1,"column":41,"nodeType":"227","messageId":"228","endLine":1,"endColumn":49},{"ruleId":"225","severity":1,"message":"273","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"285","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":12},{"ruleId":"240","severity":1,"message":"286","line":24,"column":32,"nodeType":"227","endLine":24,"endColumn":43},{"ruleId":"287","severity":1,"message":"288","line":37,"column":13,"nodeType":"289","endLine":37,"endColumn":56},{"ruleId":"225","severity":1,"message":"290","line":3,"column":27,"nodeType":"227","messageId":"228","endLine":3,"endColumn":39},{"ruleId":"225","severity":1,"message":"291","line":25,"column":24,"nodeType":"227","messageId":"228","endLine":25,"endColumn":37},{"ruleId":"225","severity":1,"message":"235","line":28,"column":19,"nodeType":"227","messageId":"228","endLine":28,"endColumn":25},{"ruleId":"292","severity":1,"message":"293","line":91,"column":29,"nodeType":"289","endLine":91,"endColumn":58},{"ruleId":"225","severity":1,"message":"294","line":25,"column":27,"nodeType":"227","messageId":"228","endLine":25,"endColumn":33},{"ruleId":"225","severity":1,"message":"295","line":26,"column":12,"nodeType":"227","messageId":"228","endLine":26,"endColumn":24},{"ruleId":"225","severity":1,"message":"239","line":29,"column":19,"nodeType":"227","messageId":"228","endLine":29,"endColumn":27},{"ruleId":"240","severity":1,"message":"296","line":116,"column":8,"nodeType":"242","endLine":116,"endColumn":10,"suggestions":"297"},{"ruleId":"287","severity":1,"message":"288","line":123,"column":25,"nodeType":"289","endLine":123,"endColumn":332},{"ruleId":"225","severity":1,"message":"272","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"284","line":1,"column":28,"nodeType":"227","messageId":"228","endLine":1,"endColumn":36},{"ruleId":"225","severity":1,"message":"273","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"285","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":12},{"ruleId":"225","severity":1,"message":"248","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":28},{"ruleId":"225","severity":1,"message":"238","line":7,"column":17,"nodeType":"227","messageId":"228","endLine":7,"endColumn":23},{"ruleId":"225","severity":1,"message":"263","line":26,"column":24,"nodeType":"227","messageId":"228","endLine":26,"endColumn":25},{"ruleId":"225","severity":1,"message":"298","line":27,"column":24,"nodeType":"227","messageId":"228","endLine":27,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":55,"column":34,"nodeType":"301","messageId":"302","endLine":55,"endColumn":36},{"ruleId":"225","severity":1,"message":"238","line":2,"column":17,"nodeType":"227","messageId":"228","endLine":2,"endColumn":23},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'domain' is defined but never used.","no-native-reassign",["303"],"no-negated-in-lhs",["304"],"'useQuery' is defined but never used.","'result' is assigned a value but never used.",["303"],["304"],"'server' is defined but never used.","'setCamOn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'startCall' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["305"],["303"],["304"],["303"],["304"],"'useCallback' is defined but never used.","'GET_CONVERSATION' is assigned a value but never used.","'userName' is assigned a value but never used.","'VideoView' is assigned a value but never used.","'setVideoView' is assigned a value but never used.","'isInCall' is assigned a value but never used.","'busyAlert' is assigned a value but never used.","'setBusyAlert' is assigned a value but never used.","'remoteName' is assigned a value but never used.","'setRemoteName' is assigned a value but never used.",["303"],["304"],"'cancelRequest' is assigned a value but never used.",["303"],["304"],"'d' is assigned a value but never used.","'setID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["306"],"'closeSocket' is assigned a value but never used.",["303"],["304"],["303"],["304"],"'useEffect' is defined but never used.","'fade' is defined but never used.","'videoIndex' is assigned a value but never used.","'setVideoIndex' is assigned a value but never used.","'statusChatUser' is assigned a value but never used.","'setStatusChatUser' is assigned a value but never used.","'loadingConversation' is assigned a value but never used.","'setLoadingConversation' is assigned a value but never used.","'VideoCallProvider' is defined but never used.","React Hook useEffect has a missing dependency: 'chatSocket'. Either include it or remove the dependency array.",["307"],"'data' is assigned a value but never used.","'useState' is defined but never used.","'List' is defined but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useLazyQuery' is defined but never used.","'setInProgress' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'peerId' is assigned a value but never used.","'friendPeerId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'action', 'peer', 'socket', and 'startCall'. Either include them or remove the dependency array.",["308"],"'e' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},"Update the dependencies array to be: [startCall, userId]",{"range":"317","text":"318"},"Update the dependencies array to be: [id, socket]",{"range":"319","text":"320"},"Update the dependencies array to be: [chatSocket, id]",{"range":"321","text":"322"},"Update the dependencies array to be: [action, peer, socket, startCall]",{"range":"323","text":"324"},[6768,6770],"[startCall, userId]",[1728,1732],"[id, socket]",[2875,2879],"[chatSocket, id]",[3932,3934],"[action, peer, socket, startCall]"]